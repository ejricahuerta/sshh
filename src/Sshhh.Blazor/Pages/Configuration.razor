@page "/configuration"

@using Sshhh.Discord
@using Microsoft.Extensions.Configuration
@inject IConfiguration configuration
@inject HttpClient httpclient

<div class="container-fluid mt-5">
    <section>
        <header class="m-2 mb-5">
            <h3>Discord Configuration</h3>
        </header>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Token</label>
                    <input type="text" class="form-control" placeholder="Token" @bind="discordConfiguration.Token">
                </div>
                <div class="form-group">
                    <label>Server</label>
                    <input type="text" class="form-control" placeholder="Server Id" @bind="discordConfiguration.DefaultServerId">
                </div>
                <div class="form-group">
                    <label>Log Channel</label>
                    <input type="text" class="form-control" placeholder="Log Channel Id" @bind="discordConfiguration.DefaultLogChannel">
                </div>

                <div class="form-group">
                    <button class="btn btn-primary my-2" @onclick="@(async() => await  UpdateConfigurationAsync())">Update Configuration</button>
                </div>
            </div>
        </div>

    </section>
</div>

<div class="m-2 fixed-bottom">
    <div class="alert alert-warning fade @(hasErrors? "show":"")" role="alert">
        @errorMessage
    </div>
</div>
<div class="m-2 fixed-bottom">
    <div class="alert alert-success fade @(success? "show":"")" role="alert">
        Successfully Updated Configuration
        <a href="/discord">go to sshhh discord page</a>
    </div>
</div>

@code {

    private bool hasErrors = false;
    private bool success = false;
    private string errorMessage;

    private string APIURL;
    private DiscordConfiguration discordConfiguration = new DiscordConfiguration();

    protected override async Task OnInitializedAsync()
    {
        APIURL = $"{(configuration.GetSection("SshhhAPI").Value) }/configuration";

        discordConfiguration = await httpclient.GetFromJsonAsync<DiscordConfiguration>(APIURL);

    }

    private async Task UpdateConfigurationAsync()
    {

        var response = await httpclient.PostAsJsonAsync<DiscordConfiguration>(APIURL, discordConfiguration);
        if (!response.IsSuccessStatusCode)
        {
            hasErrors = true;
            errorMessage = "Unable to update configuration.";
        }
        else
        {
            success = true;
        }

    }
}
